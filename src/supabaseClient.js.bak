import { createClient } from '@supabase/supabase-js';

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

// Create client with improved configuration to prevent timeouts and memory leaks
export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: false,
  },
  realtime: {
    params: {
      eventsPerSecond: 5, // Limit realtime events to prevent overload
    },
    timeout: 20000, // Increase timeout to 20 seconds
  },
  global: {
    headers: {
      'x-application-name': 'tastybites-frontend'
    },
    fetch: (...args) => {
      const [url, options] = args;
      
      // Set a timeout for fetch operations
      const controller = new AbortController();
      const timeoutId = setTimeout(() => {
        controller.abort();
      }, 15000); // 15-second timeout
      
      return fetch(url, {
        ...options,
        signal: controller.signal,
      })
      .then(response => {
        clearTimeout(timeoutId);
        return response;
      })
      .catch(error => {
        clearTimeout(timeoutId);
        throw error;
      });
    }
  }
});
        connectionMonitor.releaseConnection('supabase', url, true);
        throw error;
      });
    }
  }
});

// Custom function to handle database queries with timeouts
export const safeQuery = async (queryFn) => {
  try {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 10000);
    
    const result = await queryFn(controller.signal);
    clearTimeout(timeoutId);
    return result;
  } catch (error) {
    if (error.name === 'AbortError') {
      console.error('Query timed out after 10 seconds');
      throw new Error('Database query timed out. Please try again.');
    }
    throw error;
  }
};